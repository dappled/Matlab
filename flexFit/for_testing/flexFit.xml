<?xml version="1.0"?>
<doc>
    <assembly>
        <name>flexFit</name>
    </assembly>
    <members>
        <member name="T:flexFit.FlexFit">
            <summary>
            The FlexFit class provides a CLS compliant, MWArray interface to the MATLAB
            functions contained in the files:
            <newpara></newpara>
            C:\Program
            Files\MATLAB\R2014a\toolbox\javabuilder\Examples\MagicSquareExample\MagicDemoComp\fl
            exTimeFit.m
            <newpara></newpara>
            C:\Program
            Files\MATLAB\R2014a\toolbox\javabuilder\Examples\MagicSquareExample\MagicDemoComp\fl
            exWingFit.m
            <newpara></newpara>
            deployprint.m
            <newpara></newpara>
            printdlg.m
            </summary>
            <remarks>
            @Version 0.0
            </remarks>
        </member>
        <member name="M:flexFit.FlexFit.#cctor">
            <summary internal= "true">
            The static constructor instantiates and initializes the MATLAB Compiler Runtime
            instance.
            </summary>
        </member>
        <member name="M:flexFit.FlexFit.#ctor">
            <summary>
            Constructs a new instance of the FlexFit class.
            </summary>
        </member>
        <member name="M:flexFit.FlexFit.Finalize">
            <summary internal= "true">
            Class destructor called by the CLR garbage collector.
            </summary>
        </member>
        <member name="M:flexFit.FlexFit.Dispose">
            <summary>
            Frees the native resources associated with this object
            </summary>
        </member>
        <member name="M:flexFit.FlexFit.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal dispose function
            </summary>
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 5-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 6-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 7-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 8-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 9-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 10-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 11-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 12-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 13-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 14-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 15-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 16-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 17-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 18-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 19-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 20-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 21-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 22-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 23-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 24-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 25-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 26-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 27-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 28-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 29-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 30-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <param name="leftincrease">Input argument #30</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 31-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <param name="leftincrease">Input argument #30</param>
             <param name="rightincrease">Input argument #31</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 32-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <param name="leftincrease">Input argument #30</param>
             <param name="rightincrease">Input argument #31</param>
             <param name="smooth">Input argument #32</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 33-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <param name="leftincrease">Input argument #30</param>
             <param name="rightincrease">Input argument #31</param>
             <param name="smooth">Input argument #32</param>
             <param name="tight">Input argument #33</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 34-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <param name="leftincrease">Input argument #30</param>
             <param name="rightincrease">Input argument #31</param>
             <param name="smooth">Input argument #32</param>
             <param name="tight">Input argument #33</param>
             <param name="tightlb">Input argument #34</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 35-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <param name="leftincrease">Input argument #30</param>
             <param name="rightincrease">Input argument #31</param>
             <param name="smooth">Input argument #32</param>
             <param name="tight">Input argument #33</param>
             <param name="tightlb">Input argument #34</param>
             <param name="tightub">Input argument #35</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 36-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <param name="leftincrease">Input argument #30</param>
             <param name="rightincrease">Input argument #31</param>
             <param name="smooth">Input argument #32</param>
             <param name="tight">Input argument #33</param>
             <param name="tightlb">Input argument #34</param>
             <param name="tightub">Input argument #35</param>
             <param name="minxrange">Input argument #36</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 37-input MWArrayinterface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <param name="leftincrease">Input argument #30</param>
             <param name="rightincrease">Input argument #31</param>
             <param name="smooth">Input argument #32</param>
             <param name="tight">Input argument #33</param>
             <param name="tightlb">Input argument #34</param>
             <param name="tightub">Input argument #35</param>
             <param name="minxrange">Input argument #36</param>
             <param name="breakBoundary">Input argument #37</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 5-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 6-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 7-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 8-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 9-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 10-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 11-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 12-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 13-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 14-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 15-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 16-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 17-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 18-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 19-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 20-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 21-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 22-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 23-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 24-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 25-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 26-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 27-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 28-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 29-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 30-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <param name="leftincrease">Input argument #30</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 31-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <param name="leftincrease">Input argument #30</param>
             <param name="rightincrease">Input argument #31</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 32-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <param name="leftincrease">Input argument #30</param>
             <param name="rightincrease">Input argument #31</param>
             <param name="smooth">Input argument #32</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 33-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <param name="leftincrease">Input argument #30</param>
             <param name="rightincrease">Input argument #31</param>
             <param name="smooth">Input argument #32</param>
             <param name="tight">Input argument #33</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 34-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <param name="leftincrease">Input argument #30</param>
             <param name="rightincrease">Input argument #31</param>
             <param name="smooth">Input argument #32</param>
             <param name="tight">Input argument #33</param>
             <param name="tightlb">Input argument #34</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 35-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <param name="leftincrease">Input argument #30</param>
             <param name="rightincrease">Input argument #31</param>
             <param name="smooth">Input argument #32</param>
             <param name="tight">Input argument #33</param>
             <param name="tightlb">Input argument #34</param>
             <param name="tightub">Input argument #35</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 36-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <param name="leftincrease">Input argument #30</param>
             <param name="rightincrease">Input argument #31</param>
             <param name="smooth">Input argument #32</param>
             <param name="tight">Input argument #33</param>
             <param name="tightlb">Input argument #34</param>
             <param name="tightub">Input argument #35</param>
             <param name="minxrange">Input argument #36</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 37-input MWArray interface to the flexTimeFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="xin">Input argument #1</param>
             <param name="yin">Input argument #2</param>
             <param name="w">Input argument #3</param>
             <param name="stationarypoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="xinlb">Input argument #6</param>
             <param name="xinub">Input argument #7</param>
             <param name="xinlbmin">Input argument #8</param>
             <param name="xinubmax">Input argument #9</param>
             <param name="invalidx">Input argument #10</param>
             <param name="invalidupper">Input argument #11</param>
             <param name="invalidlower">Input argument #12</param>
             <param name="invaliduppermax">Input argument #13</param>
             <param name="invalidlowermin">Input argument #14</param>
             <param name="smoothCoeff">Input argument #15</param>
             <param name="boundaryx">Input argument #16</param>
             <param name="boundarydx">Input argument #17</param>
             <param name="boundarydxx">Input argument #18</param>
             <param name="leftright">Input argument #19</param>
             <param name="xexl">Input argument #20</param>
             <param name="yexl">Input argument #21</param>
             <param name="xendl">Input argument #22</param>
             <param name="lbendl">Input argument #23</param>
             <param name="ubendl">Input argument #24</param>
             <param name="xexr">Input argument #25</param>
             <param name="yexr">Input argument #26</param>
             <param name="xendr">Input argument #27</param>
             <param name="lbendr">Input argument #28</param>
             <param name="ubendr">Input argument #29</param>
             <param name="leftincrease">Input argument #30</param>
             <param name="rightincrease">Input argument #31</param>
             <param name="smooth">Input argument #32</param>
             <param name="tight">Input argument #33</param>
             <param name="tightlb">Input argument #34</param>
             <param name="tightub">Input argument #35</param>
             <param name="minxrange">Input argument #36</param>
             <param name="breakBoundary">Input argument #37</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexTimeFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the flexTimeFit function in which the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             input
             clc
             M = csvread('c:\temp\voltooltest\slice_IWM.USZ_20150206.csv', 1);
             leftright = nan;
             smoothCoeff = nan;
             stationarypoint = nan;
             i = find(M(:,1)==1);
             boundaryx = [nan; nan];
             boundarydx = [nan; nan];
             boundarydxx = [nan; nan];
             if isnan(leftright)
             intropart = i(1) : i(end);
             iEndl = 1 : i(1) - 1;
             iEndr = (i(end) + 1) : size(M,1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             elseif leftright == -1
             intropart = i(1) : size(M,1);
             iEndl = 1 : (i(1) - 1);
             iEndlvalid = find(~isnan(M(iEndl, 4)));
             ivalid = i(1) + find(~isnan(M(intropart, 4))) - 1;
             iinvalid = i(1) + find(isnan(M(intropart, 4))) - 1;
             else
             intropart = 1: i(end);
             iEndr = (i(end) + 1) : size(M,1);
             iEndrvalid = i(end) + find(~isnan(M(iEndr, 4)));
             ivalid = find(~isnan(M(intropart, 4)));
             iinvalid = find(isnan(M(intropart, 4)));
             end
             xin = M(ivalid,2)';
             invalidx = M(iinvalid,2)';
             yin = M(ivalid,4)';
             w = M(ivalid,5)';
             xinub = M(ivalid,7)';  inf(1,n);
             xinub(xinub == 1) = inf;
             invalidupper = M(iinvalid, 7)';
             invalidupper(invalidupper == 1) = inf;
             invalidlower = M(iinvalid, 6);
             xinlb = M(ivalid,6)';  zeros(1,n);
             if isnan(leftright)
             xexl = M(iEndlvalid, 2)';
             yexl = M(iEndlvalid, 4)';
             xendl = M(iEndl,2)';
             xexr = M(iEndrvalid, 2)';
             yexr = M(iEndrvalid, 4)';
             xendr = M(iEndr,2)';
             ubendl = M(iEndl, 7)';
             ubendl(ubendl == 1) = inf;
             ubendr = M(iEndr, 7)';
             ubendr(ubendr == 1) = inf;
             lbendl = M(iEndl, 6)';
             lbendr = M(iEndr, 6)';
             elseif leftright == -1
             xexl = M(iEndlvalid,2)';
             xexr = [];
             yexl = M(iEndlvalid,4)';
             yexr = [];
             xendl = M(iEndl,2)';
             xendr = [];
             ubendl = M(iEndl,7)';
             ubendl(ubendl == 1) = inf;
             ubendr = [];
             lbendl = M(iEndl,6)';
             lbendr = [];
             else
             xexl = [];
             xexr = M(iEndrvalid,2)';
             yexl = [];
             yexr = M(iEndrvalid,4)';
             xendl = [];
             xendr = M(iEndr,2)';
             ubendl = [];
             ubendr = M(iEndr,7)';
             ubendr(ubendr == 1) = inf;
             lbendl = [];
             lbendr = M(iEndr,6)';
             end
             leftincrease = -inf;
             rightincrease = inf;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 5-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 6-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 7-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 8-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 9-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 10-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 11-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 12-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 13-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 14-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 15-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 16-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 17-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 18-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 19-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 20-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 21-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 22-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 23-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 24-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 25-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 26-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 27-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 28-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 29-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 30-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 31-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 32-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <param name="tightub">Input argument #32</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 33-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <param name="tightub">Input argument #32</param>
             <param name="minxrange">Input argument #33</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 34-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <param name="tightub">Input argument #32</param>
             <param name="minxrange">Input argument #33</param>
             <param name="concave">Input argument #34</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 35-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <param name="tightub">Input argument #32</param>
             <param name="minxrange">Input argument #33</param>
             <param name="concave">Input argument #34</param>
             <param name="allowflat">Input argument #35</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 36-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <param name="tightub">Input argument #32</param>
             <param name="minxrange">Input argument #33</param>
             <param name="concave">Input argument #34</param>
             <param name="allowflat">Input argument #35</param>
             <param name="fromtime">Input argument #36</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 37-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <param name="tightub">Input argument #32</param>
             <param name="minxrange">Input argument #33</param>
             <param name="concave">Input argument #34</param>
             <param name="allowflat">Input argument #35</param>
             <param name="fromtime">Input argument #36</param>
             <param name="originalx">Input argument #37</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 38-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <param name="tightub">Input argument #32</param>
             <param name="minxrange">Input argument #33</param>
             <param name="concave">Input argument #34</param>
             <param name="allowflat">Input argument #35</param>
             <param name="fromtime">Input argument #36</param>
             <param name="originalx">Input argument #37</param>
             <param name="breakBoundary">Input argument #38</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 39-input MWArrayinterface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <param name="tightub">Input argument #32</param>
             <param name="minxrange">Input argument #33</param>
             <param name="concave">Input argument #34</param>
             <param name="allowflat">Input argument #35</param>
             <param name="fromtime">Input argument #36</param>
             <param name="originalx">Input argument #37</param>
             <param name="breakBoundary">Input argument #38</param>
             <param name="forcesmooth">Input argument #39</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 5-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 6-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 7-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 8-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 9-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 10-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 11-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 12-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 13-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 14-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 15-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 16-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 17-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 18-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 19-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 20-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 21-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 22-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 23-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 24-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 25-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 26-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 27-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 28-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 29-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 30-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 31-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 32-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <param name="tightub">Input argument #32</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 33-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <param name="tightub">Input argument #32</param>
             <param name="minxrange">Input argument #33</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 34-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <param name="tightub">Input argument #32</param>
             <param name="minxrange">Input argument #33</param>
             <param name="concave">Input argument #34</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 35-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <param name="tightub">Input argument #32</param>
             <param name="minxrange">Input argument #33</param>
             <param name="concave">Input argument #34</param>
             <param name="allowflat">Input argument #35</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 36-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <param name="tightub">Input argument #32</param>
             <param name="minxrange">Input argument #33</param>
             <param name="concave">Input argument #34</param>
             <param name="allowflat">Input argument #35</param>
             <param name="fromtime">Input argument #36</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 37-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <param name="tightub">Input argument #32</param>
             <param name="minxrange">Input argument #33</param>
             <param name="concave">Input argument #34</param>
             <param name="allowflat">Input argument #35</param>
             <param name="fromtime">Input argument #36</param>
             <param name="originalx">Input argument #37</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 38-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <param name="tightub">Input argument #32</param>
             <param name="minxrange">Input argument #33</param>
             <param name="concave">Input argument #34</param>
             <param name="allowflat">Input argument #35</param>
             <param name="fromtime">Input argument #36</param>
             <param name="originalx">Input argument #37</param>
             <param name="breakBoundary">Input argument #38</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 39-input MWArray interface to the flexWingFit MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x_in1">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="weight">Input argument #3</param>
             <param name="stationaryPoint">Input argument #4</param>
             <param name="tailConcavity">Input argument #5</param>
             <param name="smoothCoeff">Input argument #6</param>
             <param name="turningPoint_in1">Input argument #7</param>
             <param name="boundaryx">Input argument #8</param>
             <param name="boundarydx">Input argument #9</param>
             <param name="boundarydxx">Input argument #10</param>
             <param name="leftright">Input argument #11</param>
             <param name="upperLimitG">Input argument #12</param>
             <param name="lowerLimitG">Input argument #13</param>
             <param name="upperLimitGmax">Input argument #14</param>
             <param name="lowerLimitGmin">Input argument #15</param>
             <param name="xEndl">Input argument #16</param>
             <param name="aMaxl">Input argument #17</param>
             <param name="aMinl">Input argument #18</param>
             <param name="xEndr">Input argument #19</param>
             <param name="aMaxr">Input argument #20</param>
             <param name="aMinr">Input argument #21</param>
             <param name="invalidx">Input argument #22</param>
             <param name="invalidupper">Input argument #23</param>
             <param name="invalidlower">Input argument #24</param>
             <param name="invaliduppermax">Input argument #25</param>
             <param name="invalidlowermin">Input argument #26</param>
             <param name="leftincrease">Input argument #27</param>
             <param name="rightincrease">Input argument #28</param>
             <param name="smooth">Input argument #29</param>
             <param name="tight">Input argument #30</param>
             <param name="tightlb">Input argument #31</param>
             <param name="tightub">Input argument #32</param>
             <param name="minxrange">Input argument #33</param>
             <param name="concave">Input argument #34</param>
             <param name="allowflat">Input argument #35</param>
             <param name="fromtime">Input argument #36</param>
             <param name="originalx">Input argument #37</param>
             <param name="breakBoundary">Input argument #38</param>
             <param name="forcesmooth">Input argument #39</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:flexFit.FlexFit.flexWingFit(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the flexWingFit function in which the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             clc
             M = csvread('c:\temp\voltooltest\sampledata.csv', 2, 0);
             MM = M(M(:,5)&lt;=0.5, :);
             leftright = 1;
             IV = MM(MM(:,3)~=0 &amp; MM(:,4)~=0,:);
             IV = [IV (IV(:,3)+IV(:,4))./2];
             x = IV(:,2)';
             y = IV(:,6)';
             weight = ones(1,length(x));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:flexFit.FlexFit.WaitForFiguresToDie">
             <summary>
             This method will cause a MATLAB figure window to behave as a modal dialog box.
             The method will not return until all the figure windows associated with this
             component have been closed.
             </summary>
             <remarks>
             An application should only call this method when required to keep the
             MATLAB figure window from disappearing.  Other techniques, such as calling
             Console.ReadLine() from the application should be considered where
             possible.</remarks>
            
        </member>
    </members>
</doc>
